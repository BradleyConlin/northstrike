name: CI (smoke)

on:
  push:
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v5  # official example shows v5 usage
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"               # built-in pip cache
          cache-dependency-path: |
            requirements*.txt
            **/requirements*.txt
      - name: Install minimal deps
        run: |
          python -m pip install -U pip
          pip install onnx onnxruntime PyYAML mlflow pytest
      - name: Rebuild ONNX stubs (policy + depth)
        run: |
          mkdir -p artifacts/onnx artifacts/perf
          # Policy stub (64 -> 4)
          python scripts/inference/make_dummy_policy_onnx.py --in-dim 64 --out-dim 4 --out artifacts/onnx/policy_dummy.onnx

          # Depth stub with correct contract: in  (1x3x384x640 'rgb')
          #                                   out (1x1x384x640 'depth'), opset 13 'axes' tensor
          python - <<'PY'
          import onnx
          from onnx import helper, TensorProto
          rgb   = helper.make_tensor_value_info('rgb',   TensorProto.FLOAT, [1,3,384,640])
          depth = helper.make_tensor_value_info('depth', TensorProto.FLOAT, [1,1,384,640])
          zero_t = helper.make_tensor('zero', TensorProto.FLOAT, [], [0.0])
          axes_t = helper.make_tensor('axes', TensorProto.INT64, [1], [1])
          n0 = helper.make_node('Constant', inputs=[], outputs=['z'],    value=zero_t)
          n1 = helper.make_node('Constant', inputs=[], outputs=['axes'], value=axes_t)
          n2 = helper.make_node('Mul',       inputs=['rgb','z'], outputs=['zrgb'])
          n3 = helper.make_node('ReduceSum', inputs=['zrgb','axes'], outputs=['depth'], keepdims=1)
          g = helper.make_graph([n0,n1,n2,n3], 'depth_stub_v13', [rgb], [depth])
          m = helper.make_model(g, ir_version=10, opset_imports=[helper.make_opsetid("",13)])
          onnx.save(m, 'artifacts/onnx/depth_e24.onnx')
          PY
      - name: Normalize ONNX to house IR/opset
        run: |
          # NOTE: this script takes a positional path (no --in/--out flags)
          python scripts/inference/onnx_normalize_stable.py artifacts/onnx/policy_dummy.onnx
          python scripts/inference/onnx_normalize_stable.py artifacts/onnx/depth_e24.onnx
      - name: Restamp manifest SHA for depth
        run: |
          python scripts/inference/verify_manifest_hashes.py --manifest deploy/models/manifest.json --write
      - name: ONNX verify gate
        run: make onnx-verify
      - name: Deploy manifest smoke test
        run: pytest -q training/tests/inference/test_deploy_manifest_smoke.py -q
